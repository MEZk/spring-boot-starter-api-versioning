apply plugin: 'checkstyle'
apply plugin: 'de.thetaphi.forbiddenapis'
apply plugin: 'com.github.spotbugs'
apply plugin: "jacoco"
apply plugin: 'pmd'

// CHECKSTYLE

checkstyle {
    toolVersion '8.11'
    configFile file("config/checkstyle/checkstyle.xml")
}

checkstyleMain {
    source ='src/main/java'
}

checkstyleTest {
    source ='src/test/java'
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled false
        html.enabled true
        html.stylesheet resources.text.fromFile('config/checkstyle/checkstyle.xsl')
    }
}

// FORBIDDEN APIS

forbiddenApis {
    bundledSignatures = [ 'jdk-unsafe', 'jdk-deprecated', 'jdk-non-portable', 'jdk-system-out' ]
    ignoreFailures = false
}

forbiddenApisMain {
    group 'verification'
}

forbiddenApisTest {
    group 'verification'
}

// SPOTBUGS

spotbugs {
    toolVersion = '3.1.3'
    effort = "max"
    reportLevel = "high"
    ignoreFailures = false
}

spotbugsMain {
    group 'verification'
}

spotbugsTest {
    group 'verification'
}

tasks.withType(SpotBugsTask) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

// JACOCO

jacoco {
    toolVersion = "0.8.1"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = 'BUNDLE'

            limit {
                counter = 'LINE'
                value = 'MISSEDCOUNT'
                maximum = 10
            }
            limit {
                counter = 'BRANCH'
                value = 'MISSEDCOUNT'
                maximum = 1
            }
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/reports/jacoco")
    }
}

// PMD

pmd {
    toolVersion '6.6.0'
    ignoreFailures = false
    ruleSetFiles = files("config/pmd/pmd.xml")
    consoleOutput true
}

pmdMain {
    group 'verification'
}

pmdTest {
    group 'verification'
}

check.dependsOn jacocoTestCoverageVerification
check.dependsOn jacocoTestReport
jacocoTestReport.dependsOn test
jacocoTestCoverageVerification.mustRunAfter jacocoTestReport